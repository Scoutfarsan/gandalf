NTFY_URL="https://ntfy.sh"
NTFY_TOPIC="gandalf-dns"
#NTFY_TOKEN=""
#NTFY_USER=""
#NTFY_PASS=""
NTFY_NOTIFY_ON_OK=1
NTFY_SHOW_HOST=1
EOFpi@gandalf:~ $
pi@gandalf:~ $ sudo install -d /opt/gandalf/lib
sudo tee /opt/gandalf/lib/notify.sh >/dev/null <<'SH'
#!/usr/bin/env bash
set -euo pipefail
[ -r /opt/gandalf/env/ntfy.env ] && set +u && . /opt/gandalf/env/ntfy.env && set -u
NTFY_URL="${NTFY_URL:-}"; NTFY_TOPIC="${NTFY_TOPIC:-}"
NTFY_TOKEN="${NTFY_TOKEN:-}"; NTFY_USER="${NTFY_USER:-}"; NTFY_PASS="${NTFY_PASS:-}"
NTFY_NOTIFY_ON_OK="${NTFY_NOTIFY_ON_OK:-1}"; NTFY_SHOW_HOST="${NTFY_SHOW_HOST:-1}"
gandalf_ntfy() {
  [ -n "$NTFY_URL" ] && [ -n "$NTFY_TOPIC" ] || return 0
  local t="$1" m="${2:-}" p="${3:-3}" tags="${4:-}" click="${5:-}" host
  host="$(hostname)"; [ "$NTFY_SHOW_HOST" = "1" ] && t="[$host] $t"
  local args=(-fsS -X POST "${NTFY_URL%/}/$NTFY_TOPIC" -H "Title: $t" -H "Priority: $p")
  [ -n "$tags" ]  && args+=(-H "Tags: $tags")
  [ -n "$click" ] && args+=(-H "Click: $click")
  if [ -n "$NTFY_TOKEN" ]; then args+=(-H "Authorization: Bearer $NTFY_TOKEN")
  elif [ -n "$NTFY_USER" ] || [ -n "$NTFY_PASS" ]; then args+=(-u "${NTFY_USER}:${NTFY_PASS}"); fi
  printf "%s\n" "$m" | curl "${args[@]}" >/dev/null || true
}
SH
sudo chmod 644 /opt/gandalf/lib/notify.shpi@gandalf:~ $
pi@gandalf:~ $ sudo install -d /opt/gandalf/bin
sudo tee /opt/gandalf/bin/run-segment >/dev/null <<'SH'
#!/usr/bin/env bash
set -euo pipefail
SEG_PATH="${1:-}"; shift || true
[ -n "$SEG_PATH" ] || { echo "usage: run-segment /path/to/install.sh"; exit 2; }
[ -x "$SEG_PATH" ] || { echo "saknar körbar fil: $SEG_PATH"; exit 2; }
. /opt/gandalf/lib/notify.sh
PI_DETECTED_IP="$(hostname -I | awk '{print $1}')"
export PI_IP="${PI_IP:-${PI_DETECTED_IP}}"
export LAN_BASE="${LAN_BASE:-${PI_IP%.*}}"
NAME="$(basename "$(dirname "$SEG_PATH")")/$(basename "$SEG_PATH")"
gandalf_ntfy "Startar: $NAME" "Start: $(date +%F' '%T)" 3 "hammer_and_wrench"
set +e; OUTPUT="$("$SEG_PATH" "$@" 2>&1)"; RC=$?; set -e
if [ $RC -eq 0 ]; then
  [ "${NTFY_NOTIFY_ON_OK:-1}" = "1" ] && gandalf_ntfy "OK: $NAME" "$(printf "%s\n" "$OUTPUT" | tail -n 30)" 3 "white_check_mark"
  exit 0
else
  gandalf_ntfy "FEL: $NAME (rc=$RC)" "$(printf "%s\n" "$OUTPUT" | tail -n 60)" 5 "rotating_light"
  printf "%s\n" "$OUTPUT"; exit $RC
fi
SH
sudo chmod +x /opt/gandalf/bin/run-segment

sudo tee /opt/gandalf/bin/run-ordered >/dev/null <<'SH'
#!/usr/bin/env bash
set -euo pipefail
REPO="${REPO:-/opt/gandalf}"
ORDER_FILE="${1:-$REPO/segments/30-dns/.order}"
[ -r "$ORDER_FILE" ] || { echo "Hittar inte .order: $ORDER_FILE"; exit 2; }
. /opt/gandalf/lib/notify.sh
PI_DETECTED_IP="$(hostname -I | awk '{print $1}')"
export PI_IP="${PI_IP:-${PI_DETECTED_IP}}"
export LAN_BASE="${LAN_BASE:-${PI_IP%.*}}"
while IFS= read -r line; do
  MOD="$(printf "%s" "$line" | sed "s/#.*$//" | xargs)"; [ -z "$MOD" ] && continue
  INST="$REPO/segments/30-dns/$MOD/install.sh"
  if [ -x "$INST" ]; then /opt/gandalf/bin/run-segment "$INST"
  else gandalf_ntfy "Hoppar över: $MOD" "Saknar $INST" 3 "warning"; fi
done < "$ORDER_FILE"
SH
sudo chmod +x /opt/gandalf/bin/run-orderedpi@gandalf:~ $
pi@gandalf:~ $ HASH="$(caddy hash-password --plaintext 'NyttStarktLösen')"   # BYT om du vill
pi@gandalf:~ $ sudo PIHOLE_HASH="$HASH" bash -lc '
>   set -e
>   install -d /opt/gandalf/env
>   sed -i "/^PIHOLE_ADMIN_USER=/d;/^PIHOLE_ADMIN_HASH=/d" /opt/gandalf/env/base.env 2>/dev/null || true
>   {
>     echo "PIHOLE_ADMIN_USER='\''admin'\''"
>     printf "PIHOLE_ADMIN_HASH='\''%s'\''\n" "$PIHOLE_HASH">   } >> /opt/gandalf/env/base.env
> '
# Snabb check:
bash -lc '. /opt/gandalf/env/base.env; echo "USER=$PIHOLE_ADMIN_USER"; echo "LEN=${#PIHOLE_ADMIN_HASH}"; [[ $PIHOLE_ADMIN_HASH == \$2* ]] && echo OK || echo BAD'pi@gandalf:~ $
pi@gandalf:~ $ sudo install -d /opt/gandalf/segments/30-dns/m305-admin /etc/caddy
sudo tee /opt/gandalf/segments/30-dns/m305-admin/install.sh >/dev/null <<'SH'
#!/usr/bin/env bash
set -euo pipefail
USER_VAL=""; HASH_VAL=""
if [ -r /opt/gandalf/env/base.env ]; then
  set +u; . /opt/gandalf/env/base.env; set -u
  USER_VAL="${PIHOLE_ADMIN_USER:-}"; HASH_VAL="${PIHOLE_ADMIN_HASH:-}"
fi
NEW="/etc/caddy/Caddyfile.new"; CUR="/etc/caddy/Caddyfile"
cat >"$NEW" <<EOF
:80 {
    respond /health "gandalf ok" 200
    @admin_no_slash path /admin
    redir @admin_no_slash /admin/ 308
    handle /admin* {
$( if [ -n "$USER_VAL" ] && [ -n "$HASH_VAL" ]; then
     printf '        basicauth /* {\n            %s %s\n        }\n' "$USER_VAL" "$HASH_VAL"
   fi )
        reverse_proxy 127.0.0.1:8080
    }
}
